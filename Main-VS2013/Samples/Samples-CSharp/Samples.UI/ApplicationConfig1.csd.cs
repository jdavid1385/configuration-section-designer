//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Samples.UI.ApplicationConfig
{
    
    
    /// <summary>
    /// The SamplesSection Configuration Section.
    /// </summary>
    public partial class SamplesSection : global::System.Configuration.ConfigurationSection
    {
        
        #region Singleton Instance
        /// <summary>
        /// The XML name of the SamplesSection Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string SamplesSectionSectionName = "samplesSection";
        
        /// <summary>
        /// The XML path of the SamplesSection Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string SamplesSectionSectionPath = "samplesSection";
        
        /// <summary>
        /// Gets the SamplesSection instance.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public static global::Samples.UI.ApplicationConfig.SamplesSection Instance
        {
            get
            {
                return ((global::Samples.UI.ApplicationConfig.SamplesSection)(global::System.Configuration.ConfigurationManager.GetSection(global::Samples.UI.ApplicationConfig.SamplesSection.SamplesSectionSectionPath)));
            }
        }
        #endregion
        
        #region Xmlns Property
        /// <summary>
        /// The XML name of the <see cref="Xmlns"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string XmlnsPropertyName = "xmlns";
        
        /// <summary>
        /// Gets the XML namespace of this Configuration Section.
        /// </summary>
        /// <remarks>
        /// This property makes sure that if the configuration file contains the XML namespace,
        /// the parser doesn't throw an exception because it encounters the unknown "xmlns" attribute.
        /// </remarks>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Samples.UI.ApplicationConfig.SamplesSection.XmlnsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string Xmlns
        {
            get
            {
                return ((string)(base[global::Samples.UI.ApplicationConfig.SamplesSection.XmlnsPropertyName]));
            }
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region SampleGroups Property
        /// <summary>
        /// The XML name of the <see cref="SampleGroups"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string SampleGroupsPropertyName = "sampleGroups";
        
        /// <summary>
        /// Gets or sets the SampleGroups.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The SampleGroups.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Samples.UI.ApplicationConfig.SamplesSection.SampleGroupsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Samples.UI.ApplicationConfig.SampleGroupList SampleGroups
        {
            get
            {
                return ((global::Samples.UI.ApplicationConfig.SampleGroupList)(base[global::Samples.UI.ApplicationConfig.SamplesSection.SampleGroupsPropertyName]));
            }
            set
            {
                base[global::Samples.UI.ApplicationConfig.SamplesSection.SampleGroupsPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Samples.UI.ApplicationConfig
{
    
    
    /// <summary>
    /// The SampleGroup Configuration Element.
    /// </summary>
    public partial class SampleGroup : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Name Property
        /// <summary>
        /// The XML name of the <see cref="Name"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string NamePropertyName = "name";
        
        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The Name.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Samples.UI.ApplicationConfig.SampleGroup.NamePropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string Name
        {
            get
            {
                return ((string)(base[global::Samples.UI.ApplicationConfig.SampleGroup.NamePropertyName]));
            }
            set
            {
                base[global::Samples.UI.ApplicationConfig.SampleGroup.NamePropertyName] = value;
            }
        }
        #endregion
        
        #region Label Property
        /// <summary>
        /// The XML name of the <see cref="Label"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string LabelPropertyName = "label";
        
        /// <summary>
        /// Gets or sets the Label.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The Label.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Samples.UI.ApplicationConfig.SampleGroup.LabelPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string Label
        {
            get
            {
                return ((string)(base[global::Samples.UI.ApplicationConfig.SampleGroup.LabelPropertyName]));
            }
            set
            {
                base[global::Samples.UI.ApplicationConfig.SampleGroup.LabelPropertyName] = value;
            }
        }
        #endregion
        
        #region Samples Property
        /// <summary>
        /// The XML name of the <see cref="Samples"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string SamplesPropertyName = "samples";
        
        /// <summary>
        /// Gets or sets the Samples.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The Samples.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Samples.UI.ApplicationConfig.SampleGroup.SamplesPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=true)]
        public virtual global::Samples.UI.ApplicationConfig.SampleList Samples
        {
            get
            {
                return ((global::Samples.UI.ApplicationConfig.SampleList)(base[global::Samples.UI.ApplicationConfig.SampleGroup.SamplesPropertyName]));
            }
            set
            {
                base[global::Samples.UI.ApplicationConfig.SampleGroup.SamplesPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Samples.UI.ApplicationConfig
{
    
    
    /// <summary>
    /// A collection of SampleGroup instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::Samples.UI.ApplicationConfig.SampleGroup), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::Samples.UI.ApplicationConfig.SampleGroupList.SampleGroupPropertyName)]
    public partial class SampleGroupList : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::Samples.UI.ApplicationConfig.SampleGroup"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string SampleGroupPropertyName = "sampleGroup";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        protected override string ElementName
        {
            get
            {
                return global::Samples.UI.ApplicationConfig.SampleGroupList.SampleGroupPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::Samples.UI.ApplicationConfig.SampleGroupList.SampleGroupPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::Samples.UI.ApplicationConfig.SampleGroup)(element)).Name;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::Samples.UI.ApplicationConfig.SampleGroup"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::Samples.UI.ApplicationConfig.SampleGroup"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::Samples.UI.ApplicationConfig.SampleGroup();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::Samples.UI.ApplicationConfig.SampleGroup"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Samples.UI.ApplicationConfig.SampleGroup"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public global::Samples.UI.ApplicationConfig.SampleGroup this[int index]
        {
            get
            {
                return ((global::Samples.UI.ApplicationConfig.SampleGroup)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::Samples.UI.ApplicationConfig.SampleGroup"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::Samples.UI.ApplicationConfig.SampleGroup"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public global::Samples.UI.ApplicationConfig.SampleGroup this[object name]
        {
            get
            {
                return ((global::Samples.UI.ApplicationConfig.SampleGroup)(base.BaseGet(name)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::Samples.UI.ApplicationConfig.SampleGroup"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="sampleGroup">The <see cref="global::Samples.UI.ApplicationConfig.SampleGroup"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public void Add(global::Samples.UI.ApplicationConfig.SampleGroup sampleGroup)
        {
            base.BaseAdd(sampleGroup);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::Samples.UI.ApplicationConfig.SampleGroup"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="sampleGroup">The <see cref="global::Samples.UI.ApplicationConfig.SampleGroup"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public void Remove(global::Samples.UI.ApplicationConfig.SampleGroup sampleGroup)
        {
            base.BaseRemove(this.GetElementKey(sampleGroup));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::Samples.UI.ApplicationConfig.SampleGroup"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Samples.UI.ApplicationConfig.SampleGroup"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public global::Samples.UI.ApplicationConfig.SampleGroup GetItemAt(int index)
        {
            return ((global::Samples.UI.ApplicationConfig.SampleGroup)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::Samples.UI.ApplicationConfig.SampleGroup"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::Samples.UI.ApplicationConfig.SampleGroup"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public global::Samples.UI.ApplicationConfig.SampleGroup GetItemByKey(string name)
        {
            return ((global::Samples.UI.ApplicationConfig.SampleGroup)(base.BaseGet(((object)(name)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace Samples.UI.ApplicationConfig
{
    
    
    /// <summary>
    /// A collection of Sample instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::Samples.UI.ApplicationConfig.Sample), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::Samples.UI.ApplicationConfig.SampleList.SamplePropertyName)]
    public partial class SampleList : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::Samples.UI.ApplicationConfig.Sample"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string SamplePropertyName = "sample";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        protected override string ElementName
        {
            get
            {
                return global::Samples.UI.ApplicationConfig.SampleList.SamplePropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::Samples.UI.ApplicationConfig.SampleList.SamplePropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::Samples.UI.ApplicationConfig.Sample)(element)).Name;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::Samples.UI.ApplicationConfig.Sample"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::Samples.UI.ApplicationConfig.Sample"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::Samples.UI.ApplicationConfig.Sample();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::Samples.UI.ApplicationConfig.Sample"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Samples.UI.ApplicationConfig.Sample"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public global::Samples.UI.ApplicationConfig.Sample this[int index]
        {
            get
            {
                return ((global::Samples.UI.ApplicationConfig.Sample)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::Samples.UI.ApplicationConfig.Sample"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::Samples.UI.ApplicationConfig.Sample"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public global::Samples.UI.ApplicationConfig.Sample this[object name]
        {
            get
            {
                return ((global::Samples.UI.ApplicationConfig.Sample)(base.BaseGet(name)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::Samples.UI.ApplicationConfig.Sample"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="sample">The <see cref="global::Samples.UI.ApplicationConfig.Sample"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public void Add(global::Samples.UI.ApplicationConfig.Sample sample)
        {
            base.BaseAdd(sample);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::Samples.UI.ApplicationConfig.Sample"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="sample">The <see cref="global::Samples.UI.ApplicationConfig.Sample"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public void Remove(global::Samples.UI.ApplicationConfig.Sample sample)
        {
            base.BaseRemove(this.GetElementKey(sample));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::Samples.UI.ApplicationConfig.Sample"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Samples.UI.ApplicationConfig.Sample"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public global::Samples.UI.ApplicationConfig.Sample GetItemAt(int index)
        {
            return ((global::Samples.UI.ApplicationConfig.Sample)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::Samples.UI.ApplicationConfig.Sample"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::Samples.UI.ApplicationConfig.Sample"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public global::Samples.UI.ApplicationConfig.Sample GetItemByKey(string name)
        {
            return ((global::Samples.UI.ApplicationConfig.Sample)(base.BaseGet(((object)(name)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace Samples.UI.ApplicationConfig
{
    
    
    /// <summary>
    /// The Sample Configuration Element.
    /// </summary>
    public partial class Sample : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Name Property
        /// <summary>
        /// The XML name of the <see cref="Name"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string NamePropertyName = "name";
        
        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The Name.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Samples.UI.ApplicationConfig.Sample.NamePropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string Name
        {
            get
            {
                return ((string)(base[global::Samples.UI.ApplicationConfig.Sample.NamePropertyName]));
            }
            set
            {
                base[global::Samples.UI.ApplicationConfig.Sample.NamePropertyName] = value;
            }
        }
        #endregion
        
        #region Label Property
        /// <summary>
        /// The XML name of the <see cref="Label"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string LabelPropertyName = "label";
        
        /// <summary>
        /// Gets or sets the Label.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The Label.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Samples.UI.ApplicationConfig.Sample.LabelPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string Label
        {
            get
            {
                return ((string)(base[global::Samples.UI.ApplicationConfig.Sample.LabelPropertyName]));
            }
            set
            {
                base[global::Samples.UI.ApplicationConfig.Sample.LabelPropertyName] = value;
            }
        }
        #endregion
        
        #region FileName Property
        /// <summary>
        /// The XML name of the <see cref="FileName"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string FileNamePropertyName = "fileName";
        
        /// <summary>
        /// Gets or sets leave blank if this sample is generated on the fly (temporary).
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("Leave blank if this sample is generated on the fly (temporary).")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Samples.UI.ApplicationConfig.Sample.FileNamePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string FileName
        {
            get
            {
                return ((string)(base[global::Samples.UI.ApplicationConfig.Sample.FileNamePropertyName]));
            }
            set
            {
                base[global::Samples.UI.ApplicationConfig.Sample.FileNamePropertyName] = value;
            }
        }
        #endregion
        
        #region Description Property
        /// <summary>
        /// The XML name of the <see cref="Description"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string DescriptionPropertyName = "description";
        
        /// <summary>
        /// Gets or sets the Description.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The Description.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Samples.UI.ApplicationConfig.Sample.DescriptionPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string Description
        {
            get
            {
                return ((string)(base[global::Samples.UI.ApplicationConfig.Sample.DescriptionPropertyName]));
            }
            set
            {
                base[global::Samples.UI.ApplicationConfig.Sample.DescriptionPropertyName] = value;
            }
        }
        #endregion
        
        #region IsValid Property
        /// <summary>
        /// The XML name of the <see cref="IsValid"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string IsValidPropertyName = "isValid";
        
        /// <summary>
        /// Gets or sets indicates whether this sample should be demonstrating an error condition.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("Indicates whether this sample should be demonstrating an error condition.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Samples.UI.ApplicationConfig.Sample.IsValidPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue="true")]
        public virtual bool IsValid
        {
            get
            {
                return ((bool)(base[global::Samples.UI.ApplicationConfig.Sample.IsValidPropertyName]));
            }
            set
            {
                base[global::Samples.UI.ApplicationConfig.Sample.IsValidPropertyName] = value;
            }
        }
        #endregion
    }
}
