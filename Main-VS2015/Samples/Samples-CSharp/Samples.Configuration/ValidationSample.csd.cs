//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Samples.Configuration.ValidationSample
{
    
    
    /// <summary>
    /// The ValidationSampleSection Configuration Section.
    /// </summary>
    public partial class ValidationSampleSection : global::System.Configuration.ConfigurationSection
    {
        
        #region Singleton Instance
        /// <summary>
        /// The XML name of the ValidationSampleSection Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string ValidationSampleSectionSectionName = "validationSampleSection";
        
        /// <summary>
        /// The XML path of the ValidationSampleSection Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string ValidationSampleSectionSectionPath = "validationSampleSection";
        
        /// <summary>
        /// Gets the ValidationSampleSection instance.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public static global::Samples.Configuration.ValidationSample.ValidationSampleSection Instance
        {
            get
            {
                return ((global::Samples.Configuration.ValidationSample.ValidationSampleSection)(global::System.Configuration.ConfigurationManager.GetSection(global::Samples.Configuration.ValidationSample.ValidationSampleSection.ValidationSampleSectionSectionPath)));
            }
        }
        #endregion
        
        #region Xmlns Property
        /// <summary>
        /// The XML name of the <see cref="Xmlns"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string XmlnsPropertyName = "xmlns";
        
        /// <summary>
        /// Gets the XML namespace of this Configuration Section.
        /// </summary>
        /// <remarks>
        /// This property makes sure that if the configuration file contains the XML namespace,
        /// the parser doesn't throw an exception because it encounters the unknown "xmlns" attribute.
        /// </remarks>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Samples.Configuration.ValidationSample.ValidationSampleSection.XmlnsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string Xmlns
        {
            get
            {
                return ((string)(base[global::Samples.Configuration.ValidationSample.ValidationSampleSection.XmlnsPropertyName]));
            }
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region PositiveNumber Property
        /// <summary>
        /// The XML name of the <see cref="PositiveNumber"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string PositiveNumberPropertyName = "positiveNumber";
        
        /// <summary>
        /// Gets or sets the PositiveNumber.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The PositiveNumber.")]
        [global::System.Configuration.IntegerValidatorAttribute(ExcludeRange=false, MaxValue=2147483647, MinValue=0)]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Samples.Configuration.ValidationSample.ValidationSampleSection.PositiveNumberPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual int PositiveNumber
        {
            get
            {
                return ((int)(base[global::Samples.Configuration.ValidationSample.ValidationSampleSection.PositiveNumberPropertyName]));
            }
            set
            {
                base[global::Samples.Configuration.ValidationSample.ValidationSampleSection.PositiveNumberPropertyName] = value;
            }
        }
        #endregion
        
        #region ZipCode Property
        /// <summary>
        /// The XML name of the <see cref="ZipCode"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string ZipCodePropertyName = "zipCode";
        
        /// <summary>
        /// Gets or sets the ZipCode.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The ZipCode.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Samples.Configuration.ValidationSample.ValidationSampleSection.ZipCodePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string ZipCode
        {
            get
            {
                return ((string)(base[global::Samples.Configuration.ValidationSample.ValidationSampleSection.ZipCodePropertyName]));
            }
            set
            {
                base[global::Samples.Configuration.ValidationSample.ValidationSampleSection.ZipCodePropertyName] = value;
            }
        }
        #endregion
        
        #region AnythingButDots Property
        /// <summary>
        /// The XML name of the <see cref="AnythingButDots"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string AnythingButDotsPropertyName = "anythingButDots";
        
        /// <summary>
        /// Gets or sets the AnythingButDots.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The AnythingButDots.")]
        [global::System.Configuration.StringValidatorAttribute(InvalidCharacters=".", MaxLength=2147483647, MinLength=0)]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Samples.Configuration.ValidationSample.ValidationSampleSection.AnythingButDotsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string AnythingButDots
        {
            get
            {
                return ((string)(base[global::Samples.Configuration.ValidationSample.ValidationSampleSection.AnythingButDotsPropertyName]));
            }
            set
            {
                base[global::Samples.Configuration.ValidationSample.ValidationSampleSection.AnythingButDotsPropertyName] = value;
            }
        }
        #endregion
        
        #region Foo Property
        /// <summary>
        /// The XML name of the <see cref="Foo"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string FooPropertyName = "foo";
        
        /// <summary>
        /// Gets or sets the Foo.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The Foo.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Samples.Configuration.ValidationSample.ValidationSampleSection.FooPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Samples.Configuration.ValidationSample.Foo Foo
        {
            get
            {
                return ((global::Samples.Configuration.ValidationSample.Foo)(base[global::Samples.Configuration.ValidationSample.ValidationSampleSection.FooPropertyName]));
            }
            set
            {
                base[global::Samples.Configuration.ValidationSample.ValidationSampleSection.FooPropertyName] = value;
            }
        }
        #endregion
        
        #region Bars Property
        /// <summary>
        /// The XML name of the <see cref="Bars"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string BarsPropertyName = "bars";
        
        /// <summary>
        /// Gets or sets the Bars.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The Bars.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Samples.Configuration.ValidationSample.ValidationSampleSection.BarsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Samples.Configuration.ValidationSample.Bars Bars
        {
            get
            {
                return ((global::Samples.Configuration.ValidationSample.Bars)(base[global::Samples.Configuration.ValidationSample.ValidationSampleSection.BarsPropertyName]));
            }
            set
            {
                base[global::Samples.Configuration.ValidationSample.ValidationSampleSection.BarsPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Samples.Configuration.ValidationSample
{
    
    
    /// <summary>
    /// A collection of Bar instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::Samples.Configuration.ValidationSample.Bar), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::Samples.Configuration.ValidationSample.Bars.BarPropertyName)]
    public partial class Bars : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::Samples.Configuration.ValidationSample.Bar"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string BarPropertyName = "bar";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        protected override string ElementName
        {
            get
            {
                return global::Samples.Configuration.ValidationSample.Bars.BarPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::Samples.Configuration.ValidationSample.Bars.BarPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::Samples.Configuration.ValidationSample.Bar)(element)).Crackle;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::Samples.Configuration.ValidationSample.Bar"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::Samples.Configuration.ValidationSample.Bar"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::Samples.Configuration.ValidationSample.Bar();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::Samples.Configuration.ValidationSample.Bar"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Samples.Configuration.ValidationSample.Bar"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public global::Samples.Configuration.ValidationSample.Bar this[int index]
        {
            get
            {
                return ((global::Samples.Configuration.ValidationSample.Bar)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::Samples.Configuration.ValidationSample.Bar"/> with the specified key.
        /// </summary>
        /// <param name="crackle">The key of the <see cref="global::Samples.Configuration.ValidationSample.Bar"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public global::Samples.Configuration.ValidationSample.Bar this[object crackle]
        {
            get
            {
                return ((global::Samples.Configuration.ValidationSample.Bar)(base.BaseGet(crackle)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::Samples.Configuration.ValidationSample.Bar"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="bar">The <see cref="global::Samples.Configuration.ValidationSample.Bar"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public void Add(global::Samples.Configuration.ValidationSample.Bar bar)
        {
            base.BaseAdd(bar);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::Samples.Configuration.ValidationSample.Bar"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="bar">The <see cref="global::Samples.Configuration.ValidationSample.Bar"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public void Remove(global::Samples.Configuration.ValidationSample.Bar bar)
        {
            base.BaseRemove(this.GetElementKey(bar));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::Samples.Configuration.ValidationSample.Bar"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Samples.Configuration.ValidationSample.Bar"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public global::Samples.Configuration.ValidationSample.Bar GetItemAt(int index)
        {
            return ((global::Samples.Configuration.ValidationSample.Bar)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::Samples.Configuration.ValidationSample.Bar"/> with the specified key.
        /// </summary>
        /// <param name="crackle">The key of the <see cref="global::Samples.Configuration.ValidationSample.Bar"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public global::Samples.Configuration.ValidationSample.Bar GetItemByKey(float crackle)
        {
            return ((global::Samples.Configuration.ValidationSample.Bar)(base.BaseGet(((object)(crackle)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace Samples.Configuration.ValidationSample
{
    
    
    /// <summary>
    /// The Bar Configuration Element.
    /// </summary>
    public partial class Bar : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Snap Property
        /// <summary>
        /// The XML name of the <see cref="Snap"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string SnapPropertyName = "snap";
        
        /// <summary>
        /// Gets or sets the Snap.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The Snap.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Samples.Configuration.ValidationSample.Bar.SnapPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual bool Snap
        {
            get
            {
                return ((bool)(base[global::Samples.Configuration.ValidationSample.Bar.SnapPropertyName]));
            }
            set
            {
                base[global::Samples.Configuration.ValidationSample.Bar.SnapPropertyName] = value;
            }
        }
        #endregion
        
        #region Crackle Property
        /// <summary>
        /// The XML name of the <see cref="Crackle"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string CracklePropertyName = "crackle";
        
        /// <summary>
        /// Gets or sets the Crackle.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The Crackle.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Samples.Configuration.ValidationSample.Bar.CracklePropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual float Crackle
        {
            get
            {
                return ((float)(base[global::Samples.Configuration.ValidationSample.Bar.CracklePropertyName]));
            }
            set
            {
                base[global::Samples.Configuration.ValidationSample.Bar.CracklePropertyName] = value;
            }
        }
        #endregion
        
        #region NoDots Property
        /// <summary>
        /// The XML name of the <see cref="NoDots"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string NoDotsPropertyName = "noDots";
        
        /// <summary>
        /// Gets or sets the NoDots.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The NoDots.")]
        [global::System.Configuration.StringValidatorAttribute(InvalidCharacters=".", MaxLength=2147483647, MinLength=0)]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Samples.Configuration.ValidationSample.Bar.NoDotsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string NoDots
        {
            get
            {
                return ((string)(base[global::Samples.Configuration.ValidationSample.Bar.NoDotsPropertyName]));
            }
            set
            {
                base[global::Samples.Configuration.ValidationSample.Bar.NoDotsPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Samples.Configuration.ValidationSample
{
    
    
    /// <summary>
    /// The Foo Configuration Element.
    /// </summary>
    public partial class Foo : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Baz Property
        /// <summary>
        /// The XML name of the <see cref="Baz"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string BazPropertyName = "baz";
        
        /// <summary>
        /// Gets or sets the Baz.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The Baz.")]
        [global::System.Configuration.StringValidatorAttribute(InvalidCharacters=".", MaxLength=2147483647, MinLength=0)]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Samples.Configuration.ValidationSample.Foo.BazPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string Baz
        {
            get
            {
                return ((string)(base[global::Samples.Configuration.ValidationSample.Foo.BazPropertyName]));
            }
            set
            {
                base[global::Samples.Configuration.ValidationSample.Foo.BazPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Samples.Configuration.ValidationSample
{
    
    
    /// <summary>
    /// Class for the CustomValidators callback validator
    /// </summary>
    public partial class CustomValidatorsCallbackValidatorClass
    {
        
        /// <summary>
        /// Validation callback for the CustomValidators callback validator
        /// </summary>
        /// <param name="value">The value to validate.</param>
        /// <exception cref="global::System.ArgumentException">The value was not valid.</exception>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public static void IsPrimeCallback(object value)
        {
            // IMPORTANT NOTE: The code below does not build by default.
            // You have placed a callback validator on this property.
            // Copy the commented code below to a separate file and 
            // implement the method.
            // 
            // public partial class CustomValidatorsCallbackValidatorClass
            // {
            //     
            //     public static void IsPrime(object value)
            //     {
            //         throw new global::System.NotImplementedException();
            //     }
            // }
            // 
            global::Samples.Configuration.ValidationSample.CustomValidatorsCallbackValidatorClass.IsPrime(value);
        }
    }
}
