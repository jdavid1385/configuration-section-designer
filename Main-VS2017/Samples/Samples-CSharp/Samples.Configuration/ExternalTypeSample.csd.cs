//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Samples.Configuration.ExternalTypeSample
{
    
    
    /// <summary>
    /// The ExternalTypesComputerDemoSection Configuration Section.
    /// </summary>
    public partial class ExternalTypesComputerDemoSection : global::System.Configuration.ConfigurationSection
    {
        
        #region Singleton Instance
        /// <summary>
        /// The XML name of the ExternalTypesComputerDemoSection Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string ExternalTypesComputerDemoSectionSectionName = "externalTypesComputerDemoSection";
        
        /// <summary>
        /// The XML path of the ExternalTypesComputerDemoSection Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string ExternalTypesComputerDemoSectionSectionPath = "externalTypesComputerDemoSection";
        
        /// <summary>
        /// Gets the ExternalTypesComputerDemoSection instance.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public static global::Samples.Configuration.ExternalTypeSample.ExternalTypesComputerDemoSection Instance
        {
            get
            {
                return ((global::Samples.Configuration.ExternalTypeSample.ExternalTypesComputerDemoSection)(global::System.Configuration.ConfigurationManager.GetSection(global::Samples.Configuration.ExternalTypeSample.ExternalTypesComputerDemoSection.ExternalTypesComputerDemoSectionSectionPath)));
            }
        }
        #endregion
        
        #region Xmlns Property
        /// <summary>
        /// The XML name of the <see cref="Xmlns"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string XmlnsPropertyName = "xmlns";
        
        /// <summary>
        /// Gets the XML namespace of this Configuration Section.
        /// </summary>
        /// <remarks>
        /// This property makes sure that if the configuration file contains the XML namespace,
        /// the parser doesn't throw an exception because it encounters the unknown "xmlns" attribute.
        /// </remarks>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Samples.Configuration.ExternalTypeSample.ExternalTypesComputerDemoSection.XmlnsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string Xmlns
        {
            get
            {
                return ((string)(base[global::Samples.Configuration.ExternalTypeSample.ExternalTypesComputerDemoSection.XmlnsPropertyName]));
            }
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region computerPackage Property
        /// <summary>
        /// The XML name of the <see cref="computerPackage"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string computerPackagePropertyName = "computerPackage";
        
        /// <summary>
        /// Gets or sets the computerPackage.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The computerPackage.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Samples.Configuration.ExternalTypeSample.ExternalTypesComputerDemoSection.computerPackagePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Samples.Configuration.ExternalTypeSample.ComputerPackageElement computerPackage
        {
            get
            {
                return ((global::Samples.Configuration.ExternalTypeSample.ComputerPackageElement)(base[global::Samples.Configuration.ExternalTypeSample.ExternalTypesComputerDemoSection.computerPackagePropertyName]));
            }
            set
            {
                base[global::Samples.Configuration.ExternalTypeSample.ExternalTypesComputerDemoSection.computerPackagePropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Samples.Configuration.ExternalTypeSample
{
    
    
    /// <summary>
    /// The ComputerPackageElement Configuration Element.
    /// </summary>
    public partial class ComputerPackageElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region DesktopBox Property
        /// <summary>
        /// The XML name of the <see cref="DesktopBox"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string DesktopBoxPropertyName = "desktopBox";
        
        /// <summary>
        /// Gets or sets the DesktopBox.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The DesktopBox.")]
        [global::System.ComponentModel.TypeConverter(typeof(global::Samples.Configuration.ExternalTypeSample.CustomBlockTypeConverter))]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Samples.Configuration.ExternalTypeSample.ComputerPackageElement.DesktopBoxPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Samples.Configuration.ExternalTypes.CustomBlock DesktopBox
        {
            get
            {
                return ((global::Samples.Configuration.ExternalTypes.CustomBlock)(base[global::Samples.Configuration.ExternalTypeSample.ComputerPackageElement.DesktopBoxPropertyName]));
            }
            set
            {
                base[global::Samples.Configuration.ExternalTypeSample.ComputerPackageElement.DesktopBoxPropertyName] = value;
            }
        }
        #endregion
        
        #region AccessoriesBox Property
        /// <summary>
        /// The XML name of the <see cref="AccessoriesBox"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string AccessoriesBoxPropertyName = "accessoriesBox";
        
        /// <summary>
        /// Gets or sets the AccessoriesBox.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The AccessoriesBox.")]
        [global::System.ComponentModel.TypeConverter(typeof(global::Samples.Configuration.ExternalTypeSample.CustomBlockTypeConverter))]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Samples.Configuration.ExternalTypeSample.ComputerPackageElement.AccessoriesBoxPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Samples.Configuration.ExternalTypes.CustomBlock AccessoriesBox
        {
            get
            {
                return ((global::Samples.Configuration.ExternalTypes.CustomBlock)(base[global::Samples.Configuration.ExternalTypeSample.ComputerPackageElement.AccessoriesBoxPropertyName]));
            }
            set
            {
                base[global::Samples.Configuration.ExternalTypeSample.ComputerPackageElement.AccessoriesBoxPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Samples.Configuration.ExternalTypeSample
{
    
    
    /// <summary>
    /// The ExternalTypesFooDemoSection Configuration Section.
    /// </summary>
    public partial class ExternalTypesFooDemoSection : global::System.Configuration.ConfigurationSection
    {
        
        #region Singleton Instance
        /// <summary>
        /// The XML name of the ExternalTypesFooDemoSection Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string ExternalTypesFooDemoSectionSectionName = "externalTypesFooDemoSection";
        
        /// <summary>
        /// The XML path of the ExternalTypesFooDemoSection Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string ExternalTypesFooDemoSectionSectionPath = "ExternalTypesFooDemoGroup/externalTypesFooDemoSection";
        
        /// <summary>
        /// Gets the ExternalTypesFooDemoSection instance.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public static global::Samples.Configuration.ExternalTypeSample.ExternalTypesFooDemoSection Instance
        {
            get
            {
                return ((global::Samples.Configuration.ExternalTypeSample.ExternalTypesFooDemoSection)(global::System.Configuration.ConfigurationManager.GetSection(global::Samples.Configuration.ExternalTypeSample.ExternalTypesFooDemoSection.ExternalTypesFooDemoSectionSectionPath)));
            }
        }
        #endregion
        
        #region Xmlns Property
        /// <summary>
        /// The XML name of the <see cref="Xmlns"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string XmlnsPropertyName = "xmlns";
        
        /// <summary>
        /// Gets the XML namespace of this Configuration Section.
        /// </summary>
        /// <remarks>
        /// This property makes sure that if the configuration file contains the XML namespace,
        /// the parser doesn't throw an exception because it encounters the unknown "xmlns" attribute.
        /// </remarks>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Samples.Configuration.ExternalTypeSample.ExternalTypesFooDemoSection.XmlnsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string Xmlns
        {
            get
            {
                return ((string)(base[global::Samples.Configuration.ExternalTypeSample.ExternalTypesFooDemoSection.XmlnsPropertyName]));
            }
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Samples Property
        /// <summary>
        /// The XML name of the <see cref="Samples"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string SamplesPropertyName = "samples";
        
        /// <summary>
        /// Gets or sets the Samples.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The Samples.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Samples.Configuration.ExternalTypeSample.ExternalTypesFooDemoSection.SamplesPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual int Samples
        {
            get
            {
                return ((int)(base[global::Samples.Configuration.ExternalTypeSample.ExternalTypesFooDemoSection.SamplesPropertyName]));
            }
            set
            {
                base[global::Samples.Configuration.ExternalTypeSample.ExternalTypesFooDemoSection.SamplesPropertyName] = value;
            }
        }
        #endregion
        
        #region Foo Property
        /// <summary>
        /// The XML name of the <see cref="Foo"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string FooPropertyName = "foo";
        
        /// <summary>
        /// Gets or sets the Foo.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The Foo.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Samples.Configuration.ExternalTypeSample.ExternalTypesFooDemoSection.FooPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Samples.Configuration.ExternalTypeSample.Foo Foo
        {
            get
            {
                return ((global::Samples.Configuration.ExternalTypeSample.Foo)(base[global::Samples.Configuration.ExternalTypeSample.ExternalTypesFooDemoSection.FooPropertyName]));
            }
            set
            {
                base[global::Samples.Configuration.ExternalTypeSample.ExternalTypesFooDemoSection.FooPropertyName] = value;
            }
        }
        #endregion
        
        #region Bars Property
        /// <summary>
        /// The XML name of the <see cref="Bars"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string BarsPropertyName = "bars";
        
        /// <summary>
        /// Gets or sets the Bars.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The Bars.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Samples.Configuration.ExternalTypeSample.ExternalTypesFooDemoSection.BarsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Samples.Configuration.ExternalTypeSample.Bars Bars
        {
            get
            {
                return ((global::Samples.Configuration.ExternalTypeSample.Bars)(base[global::Samples.Configuration.ExternalTypeSample.ExternalTypesFooDemoSection.BarsPropertyName]));
            }
            set
            {
                base[global::Samples.Configuration.ExternalTypeSample.ExternalTypesFooDemoSection.BarsPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Samples.Configuration.ExternalTypeSample
{
    
    
    /// <summary>
    /// A collection of Bar instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::Samples.Configuration.ExternalTypeSample.Bar), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::Samples.Configuration.ExternalTypeSample.Bars.BarPropertyName)]
    public partial class Bars : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::Samples.Configuration.ExternalTypeSample.Bar"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string BarPropertyName = "bar";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        protected override string ElementName
        {
            get
            {
                return global::Samples.Configuration.ExternalTypeSample.Bars.BarPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::Samples.Configuration.ExternalTypeSample.Bars.BarPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::Samples.Configuration.ExternalTypeSample.Bar)(element)).Crackle;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::Samples.Configuration.ExternalTypeSample.Bar"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::Samples.Configuration.ExternalTypeSample.Bar"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::Samples.Configuration.ExternalTypeSample.Bar();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::Samples.Configuration.ExternalTypeSample.Bar"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Samples.Configuration.ExternalTypeSample.Bar"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public global::Samples.Configuration.ExternalTypeSample.Bar this[int index]
        {
            get
            {
                return ((global::Samples.Configuration.ExternalTypeSample.Bar)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::Samples.Configuration.ExternalTypeSample.Bar"/> with the specified key.
        /// </summary>
        /// <param name="crackle">The key of the <see cref="global::Samples.Configuration.ExternalTypeSample.Bar"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public global::Samples.Configuration.ExternalTypeSample.Bar this[object crackle]
        {
            get
            {
                return ((global::Samples.Configuration.ExternalTypeSample.Bar)(base.BaseGet(crackle)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::Samples.Configuration.ExternalTypeSample.Bar"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="bar">The <see cref="global::Samples.Configuration.ExternalTypeSample.Bar"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public void Add(global::Samples.Configuration.ExternalTypeSample.Bar bar)
        {
            base.BaseAdd(bar);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::Samples.Configuration.ExternalTypeSample.Bar"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="bar">The <see cref="global::Samples.Configuration.ExternalTypeSample.Bar"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public void Remove(global::Samples.Configuration.ExternalTypeSample.Bar bar)
        {
            base.BaseRemove(this.GetElementKey(bar));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::Samples.Configuration.ExternalTypeSample.Bar"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Samples.Configuration.ExternalTypeSample.Bar"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public global::Samples.Configuration.ExternalTypeSample.Bar GetItemAt(int index)
        {
            return ((global::Samples.Configuration.ExternalTypeSample.Bar)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::Samples.Configuration.ExternalTypeSample.Bar"/> with the specified key.
        /// </summary>
        /// <param name="crackle">The key of the <see cref="global::Samples.Configuration.ExternalTypeSample.Bar"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public global::Samples.Configuration.ExternalTypeSample.Bar GetItemByKey(float crackle)
        {
            return ((global::Samples.Configuration.ExternalTypeSample.Bar)(base.BaseGet(((object)(crackle)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace Samples.Configuration.ExternalTypeSample
{
    
    
    /// <summary>
    /// The Bar Configuration Element.
    /// </summary>
    public partial class Bar : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Snap Property
        /// <summary>
        /// The XML name of the <see cref="Snap"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string SnapPropertyName = "snap";
        
        /// <summary>
        /// Gets or sets the Snap.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The Snap.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Samples.Configuration.ExternalTypeSample.Bar.SnapPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual bool Snap
        {
            get
            {
                return ((bool)(base[global::Samples.Configuration.ExternalTypeSample.Bar.SnapPropertyName]));
            }
            set
            {
                base[global::Samples.Configuration.ExternalTypeSample.Bar.SnapPropertyName] = value;
            }
        }
        #endregion
        
        #region Crackle Property
        /// <summary>
        /// The XML name of the <see cref="Crackle"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string CracklePropertyName = "crackle";
        
        /// <summary>
        /// Gets or sets the Crackle.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The Crackle.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Samples.Configuration.ExternalTypeSample.Bar.CracklePropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual float Crackle
        {
            get
            {
                return ((float)(base[global::Samples.Configuration.ExternalTypeSample.Bar.CracklePropertyName]));
            }
            set
            {
                base[global::Samples.Configuration.ExternalTypeSample.Bar.CracklePropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Samples.Configuration.ExternalTypeSample
{
    
    
    /// <summary>
    /// The Foo Configuration Element.
    /// </summary>
    public partial class Foo : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Baz Property
        /// <summary>
        /// The XML name of the <see cref="Baz"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string BazPropertyName = "baz";
        
        /// <summary>
        /// Gets or sets the Baz.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The Baz.")]
        [global::System.ComponentModel.TypeConverter(typeof(global::Samples.Configuration.ExternalTypeSample.CustomBlockTypeConverter))]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Samples.Configuration.ExternalTypeSample.Foo.BazPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Samples.Configuration.ExternalTypes.CustomBlock Baz
        {
            get
            {
                return ((global::Samples.Configuration.ExternalTypes.CustomBlock)(base[global::Samples.Configuration.ExternalTypeSample.Foo.BazPropertyName]));
            }
            set
            {
                base[global::Samples.Configuration.ExternalTypeSample.Foo.BazPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Samples.Configuration.ExternalTypeSample
{
    
    
    /// <summary>
    /// CustomBlockTypeConverter Custom Converter
    /// </summary>
    public partial class CustomBlockTypeConverter : global::System.Configuration.ConfigurationConverterBase
    {
        
        /// <summary>
        /// Converts from <see cref="string" /> to <see cref="global::Samples.Configuration.ExternalTypes.CustomBlock" />.
        /// </summary>
        /// <param name="context">The <see cref="global::System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
        /// <param name="culture">The <see cref="global::System.Globalization.CultureInfo" /> to use as the current culture.</param>
        /// <param name="value">The <see cref="string" /> to convert from.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override object ConvertFrom(global::System.ComponentModel.ITypeDescriptorContext context, global::System.Globalization.CultureInfo culture, object value)
        {
            // IMPORTANT NOTE: The code below does not build by default.
            // This is a custom type validator that must be implemented
            // for it to build. Place the following in a separate file
            // and implement the method.
            // 
            // public partial class CustomBlockTypeConverter
            // {
            //     
            //     private global::Samples.Configuration.ExternalTypes.CustomBlock ConvertFromStringToCustomBlock(global::System.ComponentModel.ITypeDescriptorContext context, global::System.Globalization.CultureInfo culture, string value)
            //     {
            //         throw new global::System.NotImplementedException();
            //     }
            // }
            // 
            return this.ConvertFromStringToCustomBlock(context, culture, ((string)(value)));
        }
        
        /// <summary>
        /// Converts from <see cref="global::Samples.Configuration.ExternalTypes.CustomBlock" /> to <see cref="string" />.
        /// </summary>
        /// <param name="context">The <see cref="global::System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
        /// <param name="culture">The <see cref="global::System.Globalization.CultureInfo" /> to use as the current culture.</param>
        /// <param name="value">The <see cref="string" /> to convert from.</param>
        /// <param name="type">The <see cref="global::System.Type" /> to convert the value parameter to.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override object ConvertTo(global::System.ComponentModel.ITypeDescriptorContext context, global::System.Globalization.CultureInfo culture, object value, global::System.Type type)
        {
            // IMPORTANT NOTE: The code below does not build by default.
            // This is a custom type validator that must be implemented
            // for it to build. Place the following in a separate file
            // and implement the method.
            // 
            // public partial class CustomBlockTypeConverter
            // {
            //     
            //     private string ConvertToCustomBlockFromString(global::System.ComponentModel.ITypeDescriptorContext context, global::System.Globalization.CultureInfo culture, global::Samples.Configuration.ExternalTypes.CustomBlock value, global::System.Type type)
            //     {
            //         return value.ToString();
            //     }
            // }
            // 
            return this.ConvertToCustomBlockFromString(context, culture, ((global::Samples.Configuration.ExternalTypes.CustomBlock)(value)), type);
        }
    }
}
