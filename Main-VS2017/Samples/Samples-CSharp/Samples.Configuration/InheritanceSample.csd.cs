//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Samples.Configuration.InheritanceSample
{
    
    
    /// <summary>
    /// The SchoolRegistrySection Configuration Section.
    /// </summary>
    public partial class SchoolRegistrySection : global::Samples.Configuration.InheritanceSample.AbstractSection
    {
        
        #region Singleton Instance
        /// <summary>
        /// The XML name of the SchoolRegistrySection Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string SchoolRegistrySectionSectionName = "schoolRegistrySection";
        
        /// <summary>
        /// The XML path of the SchoolRegistrySection Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string SchoolRegistrySectionSectionPath = "schoolRegistrySection";
        
        /// <summary>
        /// Gets the SchoolRegistrySection instance.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public static global::Samples.Configuration.InheritanceSample.SchoolRegistrySection Instance
        {
            get
            {
                return ((global::Samples.Configuration.InheritanceSample.SchoolRegistrySection)(global::System.Configuration.ConfigurationManager.GetSection(global::Samples.Configuration.InheritanceSample.SchoolRegistrySection.SchoolRegistrySectionSectionPath)));
            }
        }
        #endregion
        
        #region Xmlns Property
        /// <summary>
        /// The XML name of the <see cref="Xmlns"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string XmlnsPropertyName = "xmlns";
        
        /// <summary>
        /// Gets the XML namespace of this Configuration Section.
        /// </summary>
        /// <remarks>
        /// This property makes sure that if the configuration file contains the XML namespace,
        /// the parser doesn't throw an exception because it encounters the unknown "xmlns" attribute.
        /// </remarks>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Samples.Configuration.InheritanceSample.SchoolRegistrySection.XmlnsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string Xmlns
        {
            get
            {
                return ((string)(base[global::Samples.Configuration.InheritanceSample.SchoolRegistrySection.XmlnsPropertyName]));
            }
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region SchoolName Property
        /// <summary>
        /// The XML name of the <see cref="SchoolName"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string SchoolNamePropertyName = "schoolName";
        
        /// <summary>
        /// Gets or sets the SchoolName.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The SchoolName.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Samples.Configuration.InheritanceSample.SchoolRegistrySection.SchoolNamePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string SchoolName
        {
            get
            {
                return ((string)(base[global::Samples.Configuration.InheritanceSample.SchoolRegistrySection.SchoolNamePropertyName]));
            }
            set
            {
                base[global::Samples.Configuration.InheritanceSample.SchoolRegistrySection.SchoolNamePropertyName] = value;
            }
        }
        #endregion
        
        #region Professors Property
        /// <summary>
        /// The XML name of the <see cref="Professors"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string ProfessorsPropertyName = "professors";
        
        /// <summary>
        /// Gets or sets the Professors.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The Professors.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Samples.Configuration.InheritanceSample.SchoolRegistrySection.ProfessorsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Samples.Configuration.InheritanceSample.Professors Professors
        {
            get
            {
                return ((global::Samples.Configuration.InheritanceSample.Professors)(base[global::Samples.Configuration.InheritanceSample.SchoolRegistrySection.ProfessorsPropertyName]));
            }
            set
            {
                base[global::Samples.Configuration.InheritanceSample.SchoolRegistrySection.ProfessorsPropertyName] = value;
            }
        }
        #endregion
        
        #region Students Property
        /// <summary>
        /// The XML name of the <see cref="Students"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string StudentsPropertyName = "";
        
        /// <summary>
        /// Gets or sets the Students.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The Students.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Samples.Configuration.InheritanceSample.SchoolRegistrySection.StudentsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=true)]
        public virtual global::Samples.Configuration.InheritanceSample.Students Students
        {
            get
            {
                return ((global::Samples.Configuration.InheritanceSample.Students)(base[global::Samples.Configuration.InheritanceSample.SchoolRegistrySection.StudentsPropertyName]));
            }
            set
            {
                base[global::Samples.Configuration.InheritanceSample.SchoolRegistrySection.StudentsPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Samples.Configuration.InheritanceSample
{
    
    
    /// <summary>
    /// The NamedElement Configuration Element.
    /// </summary>
    public abstract partial class NamedElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Name Property
        /// <summary>
        /// The XML name of the <see cref="Name"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string NamePropertyName = "name";
        
        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The Name.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Samples.Configuration.InheritanceSample.NamedElement.NamePropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string Name
        {
            get
            {
                return ((string)(base[global::Samples.Configuration.InheritanceSample.NamedElement.NamePropertyName]));
            }
            set
            {
                base[global::Samples.Configuration.InheritanceSample.NamedElement.NamePropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Samples.Configuration.InheritanceSample
{
    
    
    /// <summary>
    /// The Person Configuration Element.
    /// </summary>
    public abstract partial class Person : global::Samples.Configuration.InheritanceSample.NamedElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region YearOfBirth Property
        /// <summary>
        /// The XML name of the <see cref="YearOfBirth"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string YearOfBirthPropertyName = "yearOfBirth";
        
        /// <summary>
        /// Gets or sets the YearOfBirth.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The YearOfBirth.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Samples.Configuration.InheritanceSample.Person.YearOfBirthPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual int YearOfBirth
        {
            get
            {
                return ((int)(base[global::Samples.Configuration.InheritanceSample.Person.YearOfBirthPropertyName]));
            }
            set
            {
                base[global::Samples.Configuration.InheritanceSample.Person.YearOfBirthPropertyName] = value;
            }
        }
        #endregion
        
        #region YearOfDeath Property
        /// <summary>
        /// The XML name of the <see cref="YearOfDeath"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string YearOfDeathPropertyName = "yearOfDeath";
        
        /// <summary>
        /// Gets or sets the YearOfDeath.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The YearOfDeath.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Samples.Configuration.InheritanceSample.Person.YearOfDeathPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual int YearOfDeath
        {
            get
            {
                return ((int)(base[global::Samples.Configuration.InheritanceSample.Person.YearOfDeathPropertyName]));
            }
            set
            {
                base[global::Samples.Configuration.InheritanceSample.Person.YearOfDeathPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Samples.Configuration.InheritanceSample
{
    
    
    /// <summary>
    /// The Student Configuration Element.
    /// </summary>
    public partial class Student : global::Samples.Configuration.InheritanceSample.Person
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Grades Property
        /// <summary>
        /// The XML name of the <see cref="Grades"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string GradesPropertyName = "grades";
        
        /// <summary>
        /// Gets or sets the Grades.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The Grades.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Samples.Configuration.InheritanceSample.Student.GradesPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Samples.Configuration.InheritanceSample.Grades Grades
        {
            get
            {
                return ((global::Samples.Configuration.InheritanceSample.Grades)(base[global::Samples.Configuration.InheritanceSample.Student.GradesPropertyName]));
            }
            set
            {
                base[global::Samples.Configuration.InheritanceSample.Student.GradesPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Samples.Configuration.InheritanceSample
{
    
    
    /// <summary>
    /// A collection of Grade instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::Samples.Configuration.InheritanceSample.Grade), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::Samples.Configuration.InheritanceSample.Grades.GradePropertyName)]
    public partial class Grades : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::Samples.Configuration.InheritanceSample.Grade"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string GradePropertyName = "grade";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        protected override string ElementName
        {
            get
            {
                return global::Samples.Configuration.InheritanceSample.Grades.GradePropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::Samples.Configuration.InheritanceSample.Grades.GradePropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::Samples.Configuration.InheritanceSample.Grade)(element)).Class;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::Samples.Configuration.InheritanceSample.Grade"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::Samples.Configuration.InheritanceSample.Grade"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::Samples.Configuration.InheritanceSample.Grade();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::Samples.Configuration.InheritanceSample.Grade"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Samples.Configuration.InheritanceSample.Grade"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public global::Samples.Configuration.InheritanceSample.Grade this[int index]
        {
            get
            {
                return ((global::Samples.Configuration.InheritanceSample.Grade)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::Samples.Configuration.InheritanceSample.Grade"/> with the specified key.
        /// </summary>
        /// <param name="class">The key of the <see cref="global::Samples.Configuration.InheritanceSample.Grade"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public global::Samples.Configuration.InheritanceSample.Grade this[object @class]
        {
            get
            {
                return ((global::Samples.Configuration.InheritanceSample.Grade)(base.BaseGet(@class)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::Samples.Configuration.InheritanceSample.Grade"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="grade">The <see cref="global::Samples.Configuration.InheritanceSample.Grade"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public void Add(global::Samples.Configuration.InheritanceSample.Grade grade)
        {
            base.BaseAdd(grade);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::Samples.Configuration.InheritanceSample.Grade"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="grade">The <see cref="global::Samples.Configuration.InheritanceSample.Grade"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public void Remove(global::Samples.Configuration.InheritanceSample.Grade grade)
        {
            base.BaseRemove(this.GetElementKey(grade));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::Samples.Configuration.InheritanceSample.Grade"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Samples.Configuration.InheritanceSample.Grade"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public global::Samples.Configuration.InheritanceSample.Grade GetItemAt(int index)
        {
            return ((global::Samples.Configuration.InheritanceSample.Grade)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::Samples.Configuration.InheritanceSample.Grade"/> with the specified key.
        /// </summary>
        /// <param name="class">The key of the <see cref="global::Samples.Configuration.InheritanceSample.Grade"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public global::Samples.Configuration.InheritanceSample.Grade GetItemByKey(string @class)
        {
            return ((global::Samples.Configuration.InheritanceSample.Grade)(base.BaseGet(((object)(@class)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace Samples.Configuration.InheritanceSample
{
    
    
    /// <summary>
    /// The Grade Configuration Element.
    /// </summary>
    public partial class Grade : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region GradeValue Property
        /// <summary>
        /// The XML name of the <see cref="GradeValue"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string GradeValuePropertyName = "grade";
        
        /// <summary>
        /// Gets or sets the GradeValue.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The GradeValue.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Samples.Configuration.InheritanceSample.Grade.GradeValuePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string GradeValue
        {
            get
            {
                return ((string)(base[global::Samples.Configuration.InheritanceSample.Grade.GradeValuePropertyName]));
            }
            set
            {
                base[global::Samples.Configuration.InheritanceSample.Grade.GradeValuePropertyName] = value;
            }
        }
        #endregion
        
        #region Class Property
        /// <summary>
        /// The XML name of the <see cref="Class"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string ClassPropertyName = "class";
        
        /// <summary>
        /// Gets or sets the Class.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The Class.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Samples.Configuration.InheritanceSample.Grade.ClassPropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string Class
        {
            get
            {
                return ((string)(base[global::Samples.Configuration.InheritanceSample.Grade.ClassPropertyName]));
            }
            set
            {
                base[global::Samples.Configuration.InheritanceSample.Grade.ClassPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Samples.Configuration.InheritanceSample
{
    
    
    /// <summary>
    /// The Professor Configuration Element.
    /// </summary>
    public partial class Professor : global::Samples.Configuration.InheritanceSample.Person
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Students Property
        /// <summary>
        /// The XML name of the <see cref="Students"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string StudentsPropertyName = "";
        
        /// <summary>
        /// Gets or sets the Students.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The Students.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Samples.Configuration.InheritanceSample.Professor.StudentsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=true)]
        public virtual global::Samples.Configuration.InheritanceSample.Students Students
        {
            get
            {
                return ((global::Samples.Configuration.InheritanceSample.Students)(base[global::Samples.Configuration.InheritanceSample.Professor.StudentsPropertyName]));
            }
            set
            {
                base[global::Samples.Configuration.InheritanceSample.Professor.StudentsPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Samples.Configuration.InheritanceSample
{
    
    
    /// <summary>
    /// A collection of Student instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::Samples.Configuration.InheritanceSample.Student), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::Samples.Configuration.InheritanceSample.Students.StudentPropertyName)]
    public partial class Students : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::Samples.Configuration.InheritanceSample.Student"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string StudentPropertyName = "student";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        protected override string ElementName
        {
            get
            {
                return global::Samples.Configuration.InheritanceSample.Students.StudentPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::Samples.Configuration.InheritanceSample.Students.StudentPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::Samples.Configuration.InheritanceSample.Student)(element)).Name;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::Samples.Configuration.InheritanceSample.Student"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::Samples.Configuration.InheritanceSample.Student"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::Samples.Configuration.InheritanceSample.Student();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::Samples.Configuration.InheritanceSample.Student"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Samples.Configuration.InheritanceSample.Student"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public global::Samples.Configuration.InheritanceSample.Student this[int index]
        {
            get
            {
                return ((global::Samples.Configuration.InheritanceSample.Student)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::Samples.Configuration.InheritanceSample.Student"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::Samples.Configuration.InheritanceSample.Student"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public global::Samples.Configuration.InheritanceSample.Student this[object name]
        {
            get
            {
                return ((global::Samples.Configuration.InheritanceSample.Student)(base.BaseGet(name)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::Samples.Configuration.InheritanceSample.Student"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="student">The <see cref="global::Samples.Configuration.InheritanceSample.Student"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public void Add(global::Samples.Configuration.InheritanceSample.Student student)
        {
            base.BaseAdd(student);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::Samples.Configuration.InheritanceSample.Student"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="student">The <see cref="global::Samples.Configuration.InheritanceSample.Student"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public void Remove(global::Samples.Configuration.InheritanceSample.Student student)
        {
            base.BaseRemove(this.GetElementKey(student));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::Samples.Configuration.InheritanceSample.Student"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Samples.Configuration.InheritanceSample.Student"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public global::Samples.Configuration.InheritanceSample.Student GetItemAt(int index)
        {
            return ((global::Samples.Configuration.InheritanceSample.Student)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::Samples.Configuration.InheritanceSample.Student"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::Samples.Configuration.InheritanceSample.Student"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public global::Samples.Configuration.InheritanceSample.Student GetItemByKey(string name)
        {
            return ((global::Samples.Configuration.InheritanceSample.Student)(base.BaseGet(((object)(name)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace Samples.Configuration.InheritanceSample
{
    
    
    /// <summary>
    /// A collection of Professor instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::Samples.Configuration.InheritanceSample.Professor), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::Samples.Configuration.InheritanceSample.Professors.ProfessorPropertyName)]
    public partial class Professors : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::Samples.Configuration.InheritanceSample.Professor"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string ProfessorPropertyName = "professor";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        protected override string ElementName
        {
            get
            {
                return global::Samples.Configuration.InheritanceSample.Professors.ProfessorPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::Samples.Configuration.InheritanceSample.Professors.ProfessorPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::Samples.Configuration.InheritanceSample.Professor)(element)).Name;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::Samples.Configuration.InheritanceSample.Professor"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::Samples.Configuration.InheritanceSample.Professor"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::Samples.Configuration.InheritanceSample.Professor();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::Samples.Configuration.InheritanceSample.Professor"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Samples.Configuration.InheritanceSample.Professor"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public global::Samples.Configuration.InheritanceSample.Professor this[int index]
        {
            get
            {
                return ((global::Samples.Configuration.InheritanceSample.Professor)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::Samples.Configuration.InheritanceSample.Professor"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::Samples.Configuration.InheritanceSample.Professor"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public global::Samples.Configuration.InheritanceSample.Professor this[object name]
        {
            get
            {
                return ((global::Samples.Configuration.InheritanceSample.Professor)(base.BaseGet(name)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::Samples.Configuration.InheritanceSample.Professor"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="professor">The <see cref="global::Samples.Configuration.InheritanceSample.Professor"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public void Add(global::Samples.Configuration.InheritanceSample.Professor professor)
        {
            base.BaseAdd(professor);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::Samples.Configuration.InheritanceSample.Professor"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="professor">The <see cref="global::Samples.Configuration.InheritanceSample.Professor"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public void Remove(global::Samples.Configuration.InheritanceSample.Professor professor)
        {
            base.BaseRemove(this.GetElementKey(professor));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::Samples.Configuration.InheritanceSample.Professor"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Samples.Configuration.InheritanceSample.Professor"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public global::Samples.Configuration.InheritanceSample.Professor GetItemAt(int index)
        {
            return ((global::Samples.Configuration.InheritanceSample.Professor)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::Samples.Configuration.InheritanceSample.Professor"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::Samples.Configuration.InheritanceSample.Professor"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public global::Samples.Configuration.InheritanceSample.Professor GetItemByKey(string name)
        {
            return ((global::Samples.Configuration.InheritanceSample.Professor)(base.BaseGet(((object)(name)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace Samples.Configuration.InheritanceSample
{
    
    
    /// <summary>
    /// The AbstractSection Configuration Section.
    /// </summary>
    public abstract partial class AbstractSection : global::System.Configuration.ConfigurationSection
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region AbstractProperty Property
        /// <summary>
        /// The XML name of the <see cref="AbstractProperty"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string AbstractPropertyPropertyName = "abstractProperty";
        
        /// <summary>
        /// Gets or sets the AbstractProperty.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The AbstractProperty.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Samples.Configuration.InheritanceSample.AbstractSection.AbstractPropertyPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string AbstractProperty
        {
            get
            {
                return ((string)(base[global::Samples.Configuration.InheritanceSample.AbstractSection.AbstractPropertyPropertyName]));
            }
            set
            {
                base[global::Samples.Configuration.InheritanceSample.AbstractSection.AbstractPropertyPropertyName] = value;
            }
        }
        #endregion
    }
}
