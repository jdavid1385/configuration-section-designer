//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Samples.Configuration.CollectionsSample
{
    
    
    /// <summary>
    /// The DefaultCollDemoSection Configuration Section.
    /// </summary>
    public partial class DefaultCollDemoSection : global::System.Configuration.ConfigurationSection
    {
        
        #region Singleton Instance
        /// <summary>
        /// The XML name of the DefaultCollDemoSection Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string DefaultCollDemoSectionSectionName = "defaultCollDemoSection";
        
        /// <summary>
        /// The XML path of the DefaultCollDemoSection Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string DefaultCollDemoSectionSectionPath = "defaultCollDemoSection";
        
        /// <summary>
        /// Gets the DefaultCollDemoSection instance.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public static global::Samples.Configuration.CollectionsSample.DefaultCollDemoSection Instance
        {
            get
            {
                return ((global::Samples.Configuration.CollectionsSample.DefaultCollDemoSection)(global::System.Configuration.ConfigurationManager.GetSection(global::Samples.Configuration.CollectionsSample.DefaultCollDemoSection.DefaultCollDemoSectionSectionPath)));
            }
        }
        #endregion
        
        #region Xmlns Property
        /// <summary>
        /// The XML name of the <see cref="Xmlns"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string XmlnsPropertyName = "xmlns";
        
        /// <summary>
        /// Gets the XML namespace of this Configuration Section.
        /// </summary>
        /// <remarks>
        /// This property makes sure that if the configuration file contains the XML namespace,
        /// the parser doesn't throw an exception because it encounters the unknown "xmlns" attribute.
        /// </remarks>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Samples.Configuration.CollectionsSample.DefaultCollDemoSection.XmlnsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string Xmlns
        {
            get
            {
                return ((string)(base[global::Samples.Configuration.CollectionsSample.DefaultCollDemoSection.XmlnsPropertyName]));
            }
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Demo1Items Property
        /// <summary>
        /// The XML name of the <see cref="Demo1Items"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string Demo1ItemsPropertyName = "";
        
        /// <summary>
        /// Gets or sets the Demo1Items.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The Demo1Items.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Samples.Configuration.CollectionsSample.DefaultCollDemoSection.Demo1ItemsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=true)]
        public virtual global::Samples.Configuration.CollectionsSample.Demo1Collection Demo1Items
        {
            get
            {
                return ((global::Samples.Configuration.CollectionsSample.Demo1Collection)(base[global::Samples.Configuration.CollectionsSample.DefaultCollDemoSection.Demo1ItemsPropertyName]));
            }
            set
            {
                base[global::Samples.Configuration.CollectionsSample.DefaultCollDemoSection.Demo1ItemsPropertyName] = value;
            }
        }
        #endregion
        
        #region Demo2Items Property
        /// <summary>
        /// The XML name of the <see cref="Demo2Items"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string Demo2ItemsPropertyName = "demo2Items";
        
        /// <summary>
        /// Gets or sets the Demo2Items.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The Demo2Items.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Samples.Configuration.CollectionsSample.DefaultCollDemoSection.Demo2ItemsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Samples.Configuration.CollectionsSample.Demo2Collection Demo2Items
        {
            get
            {
                return ((global::Samples.Configuration.CollectionsSample.Demo2Collection)(base[global::Samples.Configuration.CollectionsSample.DefaultCollDemoSection.Demo2ItemsPropertyName]));
            }
            set
            {
                base[global::Samples.Configuration.CollectionsSample.DefaultCollDemoSection.Demo2ItemsPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Samples.Configuration.CollectionsSample
{
    
    
    /// <summary>
    /// A collection of Demo1Element instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::Samples.Configuration.CollectionsSample.Demo1Element), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::Samples.Configuration.CollectionsSample.Demo1Collection.Demo1ElementPropertyName)]
    public partial class Demo1Collection : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::Samples.Configuration.CollectionsSample.Demo1Element"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string Demo1ElementPropertyName = "demoElement";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        protected override string ElementName
        {
            get
            {
                return global::Samples.Configuration.CollectionsSample.Demo1Collection.Demo1ElementPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::Samples.Configuration.CollectionsSample.Demo1Collection.Demo1ElementPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::Samples.Configuration.CollectionsSample.Demo1Element)(element)).Attribute1;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::Samples.Configuration.CollectionsSample.Demo1Element"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::Samples.Configuration.CollectionsSample.Demo1Element"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::Samples.Configuration.CollectionsSample.Demo1Element();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::Samples.Configuration.CollectionsSample.Demo1Element"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Samples.Configuration.CollectionsSample.Demo1Element"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public global::Samples.Configuration.CollectionsSample.Demo1Element this[int index]
        {
            get
            {
                return ((global::Samples.Configuration.CollectionsSample.Demo1Element)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::Samples.Configuration.CollectionsSample.Demo1Element"/> with the specified key.
        /// </summary>
        /// <param name="attribute1">The key of the <see cref="global::Samples.Configuration.CollectionsSample.Demo1Element"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public global::Samples.Configuration.CollectionsSample.Demo1Element this[object attribute1]
        {
            get
            {
                return ((global::Samples.Configuration.CollectionsSample.Demo1Element)(base.BaseGet(attribute1)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::Samples.Configuration.CollectionsSample.Demo1Element"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="demoElement">The <see cref="global::Samples.Configuration.CollectionsSample.Demo1Element"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public void Add(global::Samples.Configuration.CollectionsSample.Demo1Element demoElement)
        {
            base.BaseAdd(demoElement);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::Samples.Configuration.CollectionsSample.Demo1Element"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="demoElement">The <see cref="global::Samples.Configuration.CollectionsSample.Demo1Element"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public void Remove(global::Samples.Configuration.CollectionsSample.Demo1Element demoElement)
        {
            base.BaseRemove(this.GetElementKey(demoElement));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::Samples.Configuration.CollectionsSample.Demo1Element"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Samples.Configuration.CollectionsSample.Demo1Element"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public global::Samples.Configuration.CollectionsSample.Demo1Element GetItemAt(int index)
        {
            return ((global::Samples.Configuration.CollectionsSample.Demo1Element)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::Samples.Configuration.CollectionsSample.Demo1Element"/> with the specified key.
        /// </summary>
        /// <param name="attribute1">The key of the <see cref="global::Samples.Configuration.CollectionsSample.Demo1Element"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public global::Samples.Configuration.CollectionsSample.Demo1Element GetItemByKey(string attribute1)
        {
            return ((global::Samples.Configuration.CollectionsSample.Demo1Element)(base.BaseGet(((object)(attribute1)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace Samples.Configuration.CollectionsSample
{
    
    
    /// <summary>
    /// The Demo1Element Configuration Element.
    /// </summary>
    public partial class Demo1Element : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Attribute1 Property
        /// <summary>
        /// The XML name of the <see cref="Attribute1"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string Attribute1PropertyName = "attribute1";
        
        /// <summary>
        /// Gets or sets the Attribute1.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The Attribute1.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Samples.Configuration.CollectionsSample.Demo1Element.Attribute1PropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string Attribute1
        {
            get
            {
                return ((string)(base[global::Samples.Configuration.CollectionsSample.Demo1Element.Attribute1PropertyName]));
            }
            set
            {
                base[global::Samples.Configuration.CollectionsSample.Demo1Element.Attribute1PropertyName] = value;
            }
        }
        #endregion
        
        #region Attribute2 Property
        /// <summary>
        /// The XML name of the <see cref="Attribute2"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string Attribute2PropertyName = "attribute2";
        
        /// <summary>
        /// Gets or sets the Attribute2.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The Attribute2.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Samples.Configuration.CollectionsSample.Demo1Element.Attribute2PropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string Attribute2
        {
            get
            {
                return ((string)(base[global::Samples.Configuration.CollectionsSample.Demo1Element.Attribute2PropertyName]));
            }
            set
            {
                base[global::Samples.Configuration.CollectionsSample.Demo1Element.Attribute2PropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Samples.Configuration.CollectionsSample
{
    
    
    /// <summary>
    /// A collection of Demo2Element instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::Samples.Configuration.CollectionsSample.Demo2Element), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::Samples.Configuration.CollectionsSample.Demo2Collection.Demo2ElementPropertyName)]
    public partial class Demo2Collection : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::Samples.Configuration.CollectionsSample.Demo2Element"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string Demo2ElementPropertyName = "demo2Element";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        protected override string ElementName
        {
            get
            {
                return global::Samples.Configuration.CollectionsSample.Demo2Collection.Demo2ElementPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::Samples.Configuration.CollectionsSample.Demo2Collection.Demo2ElementPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::Samples.Configuration.CollectionsSample.Demo2Element)(element)).Attribute21;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::Samples.Configuration.CollectionsSample.Demo2Element"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::Samples.Configuration.CollectionsSample.Demo2Element"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::Samples.Configuration.CollectionsSample.Demo2Element();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::Samples.Configuration.CollectionsSample.Demo2Element"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Samples.Configuration.CollectionsSample.Demo2Element"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public global::Samples.Configuration.CollectionsSample.Demo2Element this[int index]
        {
            get
            {
                return ((global::Samples.Configuration.CollectionsSample.Demo2Element)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::Samples.Configuration.CollectionsSample.Demo2Element"/> with the specified key.
        /// </summary>
        /// <param name="attribute21">The key of the <see cref="global::Samples.Configuration.CollectionsSample.Demo2Element"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public global::Samples.Configuration.CollectionsSample.Demo2Element this[object attribute21]
        {
            get
            {
                return ((global::Samples.Configuration.CollectionsSample.Demo2Element)(base.BaseGet(attribute21)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::Samples.Configuration.CollectionsSample.Demo2Element"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="demo2Element">The <see cref="global::Samples.Configuration.CollectionsSample.Demo2Element"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public void Add(global::Samples.Configuration.CollectionsSample.Demo2Element demo2Element)
        {
            base.BaseAdd(demo2Element);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::Samples.Configuration.CollectionsSample.Demo2Element"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="demo2Element">The <see cref="global::Samples.Configuration.CollectionsSample.Demo2Element"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public void Remove(global::Samples.Configuration.CollectionsSample.Demo2Element demo2Element)
        {
            base.BaseRemove(this.GetElementKey(demo2Element));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::Samples.Configuration.CollectionsSample.Demo2Element"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Samples.Configuration.CollectionsSample.Demo2Element"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public global::Samples.Configuration.CollectionsSample.Demo2Element GetItemAt(int index)
        {
            return ((global::Samples.Configuration.CollectionsSample.Demo2Element)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::Samples.Configuration.CollectionsSample.Demo2Element"/> with the specified key.
        /// </summary>
        /// <param name="attribute21">The key of the <see cref="global::Samples.Configuration.CollectionsSample.Demo2Element"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public global::Samples.Configuration.CollectionsSample.Demo2Element GetItemByKey(string attribute21)
        {
            return ((global::Samples.Configuration.CollectionsSample.Demo2Element)(base.BaseGet(((object)(attribute21)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace Samples.Configuration.CollectionsSample
{
    
    
    /// <summary>
    /// The Demo2Element Configuration Element.
    /// </summary>
    public partial class Demo2Element : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Attribute21 Property
        /// <summary>
        /// The XML name of the <see cref="Attribute21"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string Attribute21PropertyName = "attribute21";
        
        /// <summary>
        /// Gets or sets the Attribute21.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The Attribute21.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Samples.Configuration.CollectionsSample.Demo2Element.Attribute21PropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string Attribute21
        {
            get
            {
                return ((string)(base[global::Samples.Configuration.CollectionsSample.Demo2Element.Attribute21PropertyName]));
            }
            set
            {
                base[global::Samples.Configuration.CollectionsSample.Demo2Element.Attribute21PropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Samples.Configuration.CollectionsSample
{
    
    
    /// <summary>
    /// The KeylessCollectionSection Configuration Section.
    /// </summary>
    public partial class KeylessCollectionSection : global::System.Configuration.ConfigurationSection
    {
        
        #region Singleton Instance
        /// <summary>
        /// The XML name of the KeylessCollectionSection Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string KeylessCollectionSectionSectionName = "keylessCollectionSection";
        
        /// <summary>
        /// The XML path of the KeylessCollectionSection Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string KeylessCollectionSectionSectionPath = "keylessCollectionSection";
        
        /// <summary>
        /// Gets the KeylessCollectionSection instance.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public static global::Samples.Configuration.CollectionsSample.KeylessCollectionSection Instance
        {
            get
            {
                return ((global::Samples.Configuration.CollectionsSample.KeylessCollectionSection)(global::System.Configuration.ConfigurationManager.GetSection(global::Samples.Configuration.CollectionsSample.KeylessCollectionSection.KeylessCollectionSectionSectionPath)));
            }
        }
        #endregion
        
        #region Xmlns Property
        /// <summary>
        /// The XML name of the <see cref="Xmlns"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string XmlnsPropertyName = "xmlns";
        
        /// <summary>
        /// Gets the XML namespace of this Configuration Section.
        /// </summary>
        /// <remarks>
        /// This property makes sure that if the configuration file contains the XML namespace,
        /// the parser doesn't throw an exception because it encounters the unknown "xmlns" attribute.
        /// </remarks>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Samples.Configuration.CollectionsSample.KeylessCollectionSection.XmlnsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string Xmlns
        {
            get
            {
                return ((string)(base[global::Samples.Configuration.CollectionsSample.KeylessCollectionSection.XmlnsPropertyName]));
            }
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Items Property
        /// <summary>
        /// The XML name of the <see cref="Items"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string ItemsPropertyName = "items";
        
        /// <summary>
        /// Gets or sets the Items.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The Items.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Samples.Configuration.CollectionsSample.KeylessCollectionSection.ItemsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Samples.Configuration.CollectionsSample.KeylessElementCollection Items
        {
            get
            {
                return ((global::Samples.Configuration.CollectionsSample.KeylessElementCollection)(base[global::Samples.Configuration.CollectionsSample.KeylessCollectionSection.ItemsPropertyName]));
            }
            set
            {
                base[global::Samples.Configuration.CollectionsSample.KeylessCollectionSection.ItemsPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Samples.Configuration.CollectionsSample
{
    
    
    /// <summary>
    /// A collection of KeylessElement instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::Samples.Configuration.CollectionsSample.KeylessElement), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::Samples.Configuration.CollectionsSample.KeylessElementCollection.KeylessElementPropertyName)]
    public partial class KeylessElementCollection : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::Samples.Configuration.CollectionsSample.KeylessElement"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string KeylessElementPropertyName = "keylessElement";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        protected override string ElementName
        {
            get
            {
                return global::Samples.Configuration.CollectionsSample.KeylessElementCollection.KeylessElementPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::Samples.Configuration.CollectionsSample.KeylessElementCollection.KeylessElementPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return element.GetHashCode();
        }
        
        /// <summary>
        /// Creates a new <see cref="global::Samples.Configuration.CollectionsSample.KeylessElement"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::Samples.Configuration.CollectionsSample.KeylessElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::Samples.Configuration.CollectionsSample.KeylessElement();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::Samples.Configuration.CollectionsSample.KeylessElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Samples.Configuration.CollectionsSample.KeylessElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public global::Samples.Configuration.CollectionsSample.KeylessElement this[int index]
        {
            get
            {
                return ((global::Samples.Configuration.CollectionsSample.KeylessElement)(base.BaseGet(index)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::Samples.Configuration.CollectionsSample.KeylessElement"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="keylessElement">The <see cref="global::Samples.Configuration.CollectionsSample.KeylessElement"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public void Add(global::Samples.Configuration.CollectionsSample.KeylessElement keylessElement)
        {
            base.BaseAdd(keylessElement);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::Samples.Configuration.CollectionsSample.KeylessElement"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="keylessElement">The <see cref="global::Samples.Configuration.CollectionsSample.KeylessElement"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public void Remove(global::Samples.Configuration.CollectionsSample.KeylessElement keylessElement)
        {
            base.BaseRemove(this.GetElementKey(keylessElement));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::Samples.Configuration.CollectionsSample.KeylessElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Samples.Configuration.CollectionsSample.KeylessElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public global::Samples.Configuration.CollectionsSample.KeylessElement GetItemAt(int index)
        {
            return ((global::Samples.Configuration.CollectionsSample.KeylessElement)(base.BaseGet(index)));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace Samples.Configuration.CollectionsSample
{
    
    
    /// <summary>
    /// The KeylessElement Configuration Element.
    /// </summary>
    public partial class KeylessElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Attr1 Property
        /// <summary>
        /// The XML name of the <see cref="Attr1"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string Attr1PropertyName = "attr1";
        
        /// <summary>
        /// Gets or sets the Attr1.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The Attr1.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Samples.Configuration.CollectionsSample.KeylessElement.Attr1PropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string Attr1
        {
            get
            {
                return ((string)(base[global::Samples.Configuration.CollectionsSample.KeylessElement.Attr1PropertyName]));
            }
            set
            {
                base[global::Samples.Configuration.CollectionsSample.KeylessElement.Attr1PropertyName] = value;
            }
        }
        #endregion
        
        #region Attr2 Property
        /// <summary>
        /// The XML name of the <see cref="Attr2"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        internal const string Attr2PropertyName = "attr2";
        
        /// <summary>
        /// Gets or sets the Attr2.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.7")]
        [global::System.ComponentModel.DescriptionAttribute("The Attr2.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Samples.Configuration.CollectionsSample.KeylessElement.Attr2PropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string Attr2
        {
            get
            {
                return ((string)(base[global::Samples.Configuration.CollectionsSample.KeylessElement.Attr2PropertyName]));
            }
            set
            {
                base[global::Samples.Configuration.CollectionsSample.KeylessElement.Attr2PropertyName] = value;
            }
        }
        #endregion
    }
}
