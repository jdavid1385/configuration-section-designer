<#@ template inherits="Microsoft.VisualStudio.TextTemplating.VSHost.ModelingTextTransformation" #>
<#@ output extension=".config" #>
<#@ assembly name="System.Configuration.dll" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ ConfigurationSectionDesigner processor="ConfigurationSectionDesignerDirectiveProcessor" requires="fileName='$inputFileName$'" #>
<?xml version="1.0"?>
<!--
<auto-generated>
    This code was generated by a tool.

     Changes to this file may cause incorrect behavior and will be lost if
    the code is regenerated.
</auto-generated>
-->
<configuration>
	<configSections>
<#

// Find top-level sections and section groups
List<IConfigSectionElement> topLevel = new List<IConfigSectionElement>();
foreach (BaseConfigurationType element in this.ConfigurationSectionModel.ConfigurationElements)
{
    if (element.InheritanceModifier == InheritanceModifiers.Abstract) continue;
    
	IConfigSectionElement configSectionElement = element as IConfigSectionElement;
	if (configSectionElement != null)
	{
		ConfigurationSection configSection = configSectionElement as ConfigurationSection;
		ConfigurationSectionGroup configSectionGroup = configSectionElement as ConfigurationSectionGroup;
		
		if (configSection != null)
		{
			// Are we a top-level element?
			if (configSection.ReferringConfigurationSectionGroup == null)
				topLevel.Add(configSection);
		}
		else if (configSectionGroup != null)
		{
			// Are we a top-level element?
			if (configSectionGroup.ReferringConfigurationSectionGroup == null)
				topLevel.Add(configSectionGroup);
		}
	}
}

PushIndent("\t");
foreach (IConfigSectionElement configSectionElement in topLevel)
{
	WriteConfigSection(configSectionElement);
}
PopIndent();
#>
	</configSections>
<#

foreach (IConfigSectionElement configSectionElement in topLevel)
{
	WriteConfig(configSectionElement, true);
}
#>
</configuration>
<#+

private void WriteConfigSection(IConfigSectionElement configSectionElement)
{
	PushIndent("\t");
	
	ConfigurationSection configSection = configSectionElement as ConfigurationSection;
	ConfigurationSectionGroup configSectionGroup = configSectionElement as ConfigurationSectionGroup;
	
	if (configSection != null)
	{
		WriteLine("<section name=\"{0}\" type=\"{1}{2}\"/>", new object[] { configSection.XmlSectionName, configSection.FullName, (!string.IsNullOrEmpty(this.ConfigurationSectionModel.AssemblyName)) ? ", " + this.ConfigurationSectionModel.AssemblyName : ""  } );
	}
	else if (configSectionGroup != null)
	{
		WriteLine("<sectionGroup name=\"{0}\" type=\"{1}\">", new object[] { configSectionGroup.Name, typeof(System.Configuration.ConfigurationSectionGroup).AssemblyQualifiedName } );
		if( configSectionGroup.ConfigurationSectionGroupProperties.Count > 0 )
		{
			foreach( ConfigurationSectionGroupProperty configurationSectionGroupProperty in configSectionGroup.ConfigurationSectionGroupProperties )
			{
				WriteConfigSection(configurationSectionGroupProperty.ContainedConfigurationSectionGroup);
			}
		}
		if( configSectionGroup.ConfigurationSectionProperties.Count > 0 )
		{
			foreach( ConfigurationSectionProperty configurationSectionProperty in configSectionGroup.ConfigurationSectionProperties )
			{
				WriteConfigSection(configurationSectionProperty.ContainedConfigurationSection);
			}
		}
		WriteLine("</sectionGroup>");
	}
	
	PopIndent();
}

private void WriteConfig(IConfigSectionElement configSectionElement, bool isTopLevel)
{
	PushIndent("\t");
	
	ConfigurationSection configSection = configSectionElement as ConfigurationSection;
	ConfigurationSectionGroup configSectionGroup = configSectionElement as ConfigurationSectionGroup;
	
	if (configSection != null)
	{
		if (isTopLevel)
			WriteLine("<{0} xmlns=\"{1}\">", new object[] { configSection.XmlSectionName, this.ConfigurationSectionModel.XmlSchemaNamespace } );
		else
			WriteLine("<{0}>", new object[] { configSection.XmlSectionName, this.ConfigurationSectionModel.XmlSchemaNamespace } );
		PushIndent("\t");
		WriteLine("<!--");
		WriteLine("This is just a minimal sample configuration file that shows how to declare");
		WriteLine("the configuration sections.");
		WriteLine("");
		WriteLine("Because an XML Schema Definition (XSD) is generated for each configuration");
		WriteLine("section, it should be trivial to edit these files because you have");
		WriteLine("IntelliSense on the XML definition.");
		WriteLine("-->");
		PopIndent();
		WriteLine("</{0}>", new object[] { configSection.XmlSectionName } );
	}
	else if (configSectionGroup != null)
	{
		if (isTopLevel)
			WriteLine("<{0} xmlns=\"{1}\">", new object[] { configSectionGroup.Name, this.ConfigurationSectionModel.XmlSchemaNamespace } );
		else
			WriteLine("<{0}>", new object[] { configSectionGroup.Name } );
		if( configSectionGroup.ConfigurationSectionGroupProperties.Count > 0 )
		{
			foreach( ConfigurationSectionGroupProperty configurationSectionGroupProperty in configSectionGroup.ConfigurationSectionGroupProperties )
			{
				WriteConfig(configurationSectionGroupProperty.ContainedConfigurationSectionGroup, false);
			}
		}
		if( configSectionGroup.ConfigurationSectionProperties.Count > 0 )
		{
			foreach( ConfigurationSectionProperty configurationSectionProperty in configSectionGroup.ConfigurationSectionProperties )
			{
				WriteConfig(configurationSectionProperty.ContainedConfigurationSection, false);
			}
		}
		WriteLine("</{0}>", new object[] { configSectionGroup.Name } );
	}
	
	PopIndent();
}

#>