//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.261
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Debugging.IssueTests
{
    
    
    /// <summary>
    /// The InnerConfigurationSection Configuration Section.
    /// </summary>
    public partial class InnerConfigurationSection : global::System.Configuration.ConfigurationSection
    {
        
        #region Singleton Instance
        /// <summary>
        /// The XML name of the InnerConfigurationSection Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string InnerConfigurationSectionSectionName = "innerConfigurationSection";
        
        /// <summary>
        /// Gets the InnerConfigurationSection instance.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public static global::Debugging.IssueTests.InnerConfigurationSection Instance
        {
            get
            {
                return ((global::Debugging.IssueTests.InnerConfigurationSection)(global::System.Configuration.ConfigurationManager.GetSection(global::Debugging.IssueTests.InnerConfigurationSection.InnerConfigurationSectionSectionName)));
            }
        }
        #endregion
        
        #region Xmlns Property
        /// <summary>
        /// The XML name of the <see cref="Xmlns"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string XmlnsPropertyName = "xmlns";
        
        /// <summary>
        /// Gets the XML namespace of this Configuration Section.
        /// </summary>
        /// <remarks>
        /// This property makes sure that if the configuration file contains the XML namespace,
        /// the parser doesn't throw an exception because it encounters the unknown "xmlns" attribute.
        /// </remarks>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Debugging.IssueTests.InnerConfigurationSection.XmlnsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string Xmlns
        {
            get
            {
                return ((string)(base[global::Debugging.IssueTests.InnerConfigurationSection.XmlnsPropertyName]));
            }
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region TestAttribute1 Property
        /// <summary>
        /// The XML name of the <see cref="TestAttribute1"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string TestAttribute1PropertyName = "testAttribute1";
        
        /// <summary>
        /// Gets or sets the TestAttribute1.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        [global::System.ComponentModel.DescriptionAttribute("The TestAttribute1.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Debugging.IssueTests.InnerConfigurationSection.TestAttribute1PropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string TestAttribute1
        {
            get
            {
                return ((string)(base[global::Debugging.IssueTests.InnerConfigurationSection.TestAttribute1PropertyName]));
            }
            set
            {
                base[global::Debugging.IssueTests.InnerConfigurationSection.TestAttribute1PropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Debugging.IssueTests
{
    
    
    /// <summary>
    /// The ConfigurationSection1 Configuration Section.
    /// </summary>
    public partial class ConfigurationSection1 : global::System.Configuration.ConfigurationSection
    {
        
        #region Singleton Instance
        /// <summary>
        /// The XML name of the ConfigurationSection1 Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string ConfigurationSection1SectionName = "configurationSection1";
        
        /// <summary>
        /// Gets the ConfigurationSection1 instance.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public static global::Debugging.IssueTests.ConfigurationSection1 Instance
        {
            get
            {
                return ((global::Debugging.IssueTests.ConfigurationSection1)(global::System.Configuration.ConfigurationManager.GetSection(global::Debugging.IssueTests.ConfigurationSection1.ConfigurationSection1SectionName)));
            }
        }
        #endregion
        
        #region Xmlns Property
        /// <summary>
        /// The XML name of the <see cref="Xmlns"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string XmlnsPropertyName = "xmlns";
        
        /// <summary>
        /// Gets the XML namespace of this Configuration Section.
        /// </summary>
        /// <remarks>
        /// This property makes sure that if the configuration file contains the XML namespace,
        /// the parser doesn't throw an exception because it encounters the unknown "xmlns" attribute.
        /// </remarks>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Debugging.IssueTests.ConfigurationSection1.XmlnsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string Xmlns
        {
            get
            {
                return ((string)(base[global::Debugging.IssueTests.ConfigurationSection1.XmlnsPropertyName]));
            }
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region TestAttribute2 Property
        /// <summary>
        /// The XML name of the <see cref="TestAttribute2"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string TestAttribute2PropertyName = "testAttribute2";
        
        /// <summary>
        /// Gets or sets the TestAttribute2.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        [global::System.ComponentModel.DescriptionAttribute("The TestAttribute2.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Debugging.IssueTests.ConfigurationSection1.TestAttribute2PropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string TestAttribute2
        {
            get
            {
                return ((string)(base[global::Debugging.IssueTests.ConfigurationSection1.TestAttribute2PropertyName]));
            }
            set
            {
                base[global::Debugging.IssueTests.ConfigurationSection1.TestAttribute2PropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Debugging.IssueTests
{
    
    
    /// <summary>
    /// The EmailConfigSection Configuration Section.
    /// </summary>
    public partial class EmailConfigSection : global::System.Configuration.ConfigurationSection
    {
        
        #region Singleton Instance
        /// <summary>
        /// The XML name of the EmailConfigSection Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string EmailConfigSectionSectionName = "emailConfigSection";
        
        /// <summary>
        /// Gets the EmailConfigSection instance.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public static global::Debugging.IssueTests.EmailConfigSection Instance
        {
            get
            {
                return ((global::Debugging.IssueTests.EmailConfigSection)(global::System.Configuration.ConfigurationManager.GetSection(global::Debugging.IssueTests.EmailConfigSection.EmailConfigSectionSectionName)));
            }
        }
        #endregion
        
        #region Xmlns Property
        /// <summary>
        /// The XML name of the <see cref="Xmlns"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string XmlnsPropertyName = "xmlns";
        
        /// <summary>
        /// Gets the XML namespace of this Configuration Section.
        /// </summary>
        /// <remarks>
        /// This property makes sure that if the configuration file contains the XML namespace,
        /// the parser doesn't throw an exception because it encounters the unknown "xmlns" attribute.
        /// </remarks>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Debugging.IssueTests.EmailConfigSection.XmlnsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string Xmlns
        {
            get
            {
                return ((string)(base[global::Debugging.IssueTests.EmailConfigSection.XmlnsPropertyName]));
            }
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Emails Property
        /// <summary>
        /// The XML name of the <see cref="Emails"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string EmailsPropertyName = "emails";
        
        /// <summary>
        /// Gets or sets the Emails.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Emails.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Debugging.IssueTests.EmailConfigSection.EmailsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public global::Debugging.IssueTests.EmailCollection Emails
        {
            get
            {
                return ((global::Debugging.IssueTests.EmailCollection)(base[global::Debugging.IssueTests.EmailConfigSection.EmailsPropertyName]));
            }
            set
            {
                base[global::Debugging.IssueTests.EmailConfigSection.EmailsPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Debugging.IssueTests
{
    
    
    /// <summary>
    /// A collection of Email instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::Debugging.IssueTests.Email), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::Debugging.IssueTests.EmailCollection.EmailPropertyName)]
    public partial class EmailCollection : global::System.Configuration.ConfigurationElementCollection, global::System.Collections.Generic.ICollection<global::Debugging.IssueTests.Email>
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::Debugging.IssueTests.Email"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string EmailPropertyName = "email";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        protected override string ElementName
        {
            get
            {
                return global::Debugging.IssueTests.EmailCollection.EmailPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::Debugging.IssueTests.EmailCollection.EmailPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::Debugging.IssueTests.Email)(element)).key;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::Debugging.IssueTests.Email"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::Debugging.IssueTests.Email"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::Debugging.IssueTests.Email();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::Debugging.IssueTests.Email"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Debugging.IssueTests.Email"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public global::Debugging.IssueTests.Email this[int index]
        {
            get
            {
                return ((global::Debugging.IssueTests.Email)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::Debugging.IssueTests.Email"/> with the specified key.
        /// </summary>
        /// <param name="key">The key of the <see cref="global::Debugging.IssueTests.Email"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public global::Debugging.IssueTests.Email this[object key]
        {
            get
            {
                return ((global::Debugging.IssueTests.Email)(base.BaseGet(key)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::Debugging.IssueTests.Email"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="email">The <see cref="global::Debugging.IssueTests.Email"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public void Add(global::Debugging.IssueTests.Email email)
        {
            base.BaseAdd(email);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::Debugging.IssueTests.Email"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="email">The <see cref="global::Debugging.IssueTests.Email"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public void Remove(global::Debugging.IssueTests.Email email)
        {
            base.BaseRemove(this.GetElementKey(email));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::Debugging.IssueTests.Email"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Debugging.IssueTests.Email"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public global::Debugging.IssueTests.Email GetItemAt(int index)
        {
            return ((global::Debugging.IssueTests.Email)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::Debugging.IssueTests.Email"/> with the specified key.
        /// </summary>
        /// <param name="key">The key of the <see cref="global::Debugging.IssueTests.Email"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public global::Debugging.IssueTests.Email GetItemByKey(int key)
        {
            return ((global::Debugging.IssueTests.Email)(base.BaseGet(((object)(key)))));
        }
        #endregion
        
        #region ICollection
        /// <summary>
        /// Removes all items from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public void Clear()
        {
            base.BaseClear();
        }
        
        /// <summary>
        /// Determines whether the <see cref="global::System.Configuration.ConfigurationElementCollection"/> contains a specific value.
        /// </summary>
        /// <param name="email">The object to locate in the <see cref="global::Debugging.IssueTests.Email"/>.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public bool Contains(global::Debugging.IssueTests.Email email)
        {
            return (base.BaseIndexOf(email) >= 0);
        }
        
        /// <summary>
        /// Copies the elements of the <see cref="global::System.Configuration.ConfigurationElementCollection"/> to an <see cref="System.Array"/>, starting at a particular <see cref="System.Array"/> index.
        /// </summary>
        /// <param name="array">The one-dimensional <see cref="System.Array"/> that is the destination of the elements copied from <see cref="global::System.Configuration.ConfigurationElementCollection"/>. The <see cref="System.Array"/> must have zero-based indexing.</param>
        /// <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public void CopyTo(global::Debugging.IssueTests.Email[] array, int arrayIndex)
        {
            base.CopyTo(array, arrayIndex);
        }
        
        /// <summary
        /// Gets a value indicating whether the <see cref="global::System.Configuration.ConfigurationElementCollection"/> is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        bool global::System.Collections.Generic.ICollection<global::Debugging.IssueTests.Email>.IsReadOnly
        {
            get
            {
                return this.IsReadOnly();
            }
        }
        
        /// <summary>
        /// Removes the first occurrence of a specific object from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="item">The <see cref="global::Debugging.IssueTests.Email"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        bool global::System.Collections.Generic.ICollection<global::Debugging.IssueTests.Email>.Remove(global::Debugging.IssueTests.Email item)
        {
            int idx = base.BaseIndexOf(item);
            if ((idx == -1))
            {
                return false;
            }
            base.BaseRemoveAt(idx);
            return true;
        }
        
        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public new global::System.Collections.Generic.IEnumerator<global::Debugging.IssueTests.Email> GetEnumerator()
        {
            global::System.Collections.Generic.List<global::Debugging.IssueTests.Email> list = new global::System.Collections.Generic.List<global::Debugging.IssueTests.Email>(base.Count);
            global::System.Collections.IEnumerator iter = base.GetEnumerator();
            for (; iter.MoveNext(); )
            {
                list.Add(((global::Debugging.IssueTests.Email)(iter.Current)));
            }
            return list.GetEnumerator();
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace Debugging.IssueTests
{
    
    
    /// <summary>
    /// The Email Configuration Element.
    /// </summary>
    public partial class Email : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region enabled Property
        /// <summary>
        /// The XML name of the <see cref="enabled"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string enabledPropertyName = "enabled";
        
        /// <summary>
        /// Gets or sets the enabled.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        [global::System.ComponentModel.DescriptionAttribute("The enabled.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Debugging.IssueTests.Email.enabledPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public bool enabled
        {
            get
            {
                return ((bool)(base[global::Debugging.IssueTests.Email.enabledPropertyName]));
            }
            set
            {
                base[global::Debugging.IssueTests.Email.enabledPropertyName] = value;
            }
        }
        #endregion
        
        #region key Property
        /// <summary>
        /// The XML name of the <see cref="key"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        internal const string keyPropertyName = "key";
        
        /// <summary>
        /// Gets or sets the key.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.0")]
        [global::System.ComponentModel.DescriptionAttribute("The key.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Debugging.IssueTests.Email.keyPropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public int key
        {
            get
            {
                return ((int)(base[global::Debugging.IssueTests.Email.keyPropertyName]));
            }
            set
            {
                base[global::Debugging.IssueTests.Email.keyPropertyName] = value;
            }
        }
        #endregion
    }
}
