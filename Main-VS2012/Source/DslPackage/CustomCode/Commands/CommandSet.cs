//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.Design;
using Microsoft.VisualStudio.Modeling;
using Microsoft.VisualStudio.Modeling.Shell;
using Microsoft.VisualStudio.Modeling.Diagrams;

namespace ConfigurationSectionDesigner
{
    /// <summary>
    /// Custom code for ConfigurationSectionDesignerCommandSet.
    /// </summary>
    internal partial class ConfigurationSectionDesignerCommandSet
    {	
		
        #region Constants

        /// <summary>
        /// cmdMovePropertyUp commmand identifier.
        /// </summary>
        private const int cmdMovePropertyUpID = 0x810;

        /// <summary>
        /// cmdMovePropertyDown commmand identifier.
        /// </summary>
        private const int cmdMovePropertyDownID = 0x811;

        /// <summary>
        /// cmdImportExternalEnum commmand identifier.
        /// </summary>
        private const int cmdImportExternalEnumID = 0x812;

        #endregion

        #region Members

        /// <summary>
        /// cmdMovePropertyUp unique identifier.
        /// </summary>
        private Guid cmdMovePropertyUpGUID = new Guid("{EC4ABFA5-460E-4604-9945-BD53D0BD6FC0}");

        /// <summary>
        /// cmdMovePropertyDown unique identifier.
        /// </summary>
        private Guid cmdMovePropertyDownGUID = new Guid("{E41AB78D-FC72-43e9-8AB9-CDCBA5CB383B}");

        /// <summary>
        /// cmdImportExternalEnum unique identifier.
        /// </summary>
        private Guid cmdImportExternalEnumGUID = new Guid("{CDE66367-F304-4cd6-AF5C-9B5222B29F2B}");

        #endregion

        #region Overrides

        /// <summary>
        /// Provide the menu commands that this command set handles.
        /// </summary>
        /// <returns>A list of commands.</returns>
        protected override IList<MenuCommand> GetMenuCommands()
        {
            // Execute base
            IList<MenuCommand> commands = base.GetMenuCommands();

            // Add the MovePropertyUp menu command
            DynamicStatusMenuCommand cmdMovePropertyUp =
				new DynamicStatusMenuCommand(
					new EventHandler(this.OnPopUpMenuDisplayAction),
					new EventHandler(this.OnPopUpMenuClick),
					new CommandID(
						this.cmdMovePropertyUpGUID,
						cmdMovePropertyUpID));
            commands.Add(cmdMovePropertyUp);

            // Add the MovePropertyDown menu command
            DynamicStatusMenuCommand cmdMovePropertyDown =
				new DynamicStatusMenuCommand(
					new EventHandler(this.OnPopUpMenuDisplayAction),
					new EventHandler(this.OnPopUpMenuClick),
					new CommandID(
						this.cmdMovePropertyDownGUID,
						cmdMovePropertyDownID));
            commands.Add(cmdMovePropertyDown);

            // Add the ImportExternalEnum menu command
            DynamicStatusMenuCommand cmdImportExternalEnum =
				new DynamicStatusMenuCommand(
					new EventHandler(this.OnPopUpMenuDisplayAction),
					new EventHandler(this.OnPopUpMenuClick),
					new CommandID(
						this.cmdImportExternalEnumGUID,
						cmdImportExternalEnumID));
            commands.Add(cmdImportExternalEnum);

            return commands;
        }

        #endregion
        
        #region Event Handlers

        /// <summary>
        /// Occurs when one of the custom menu items is being displayed.
        /// </summary>
        /// <param name="sender">Sender of this event.</param>
        /// <param name="e">Event arguments.</param>
        internal void OnPopUpMenuDisplayAction( object sender, EventArgs e )
        {
            // Control availability of the command
            MenuCommand command = sender as MenuCommand;
            
            if( command != null )
            {
				bool canCommandRun = true;
				
                // Check what command it is
                if( command.CommandID.Guid.Equals( this.cmdMovePropertyUpGUID ) )
                {
					foreach (object selectedObject in this.CurrentSelection)
					{
						if (selectedObject is AttributeProperty || selectedObject is ElementProperty)
							canCommandRun &= true;
						else
							canCommandRun = false;
					}
					
					CanCommandRun("cmdMovePropertyUp", ref canCommandRun);
                    command.Enabled = canCommandRun;
                    command.Visible = canCommandRun;
                    return;
                }
                else if( command.CommandID.Guid.Equals( this.cmdMovePropertyDownGUID ) )
                {
					foreach (object selectedObject in this.CurrentSelection)
					{
						if (selectedObject is AttributeProperty || selectedObject is ElementProperty)
							canCommandRun &= true;
						else
							canCommandRun = false;
					}
					
					CanCommandRun("cmdMovePropertyDown", ref canCommandRun);
                    command.Enabled = canCommandRun;
                    command.Visible = canCommandRun;
                    return;
                }
                else if( command.CommandID.Guid.Equals( this.cmdImportExternalEnumGUID ) )
                {
					foreach (object selectedObject in this.CurrentSelection)
					{
						 if (selectedObject is Diagram)
							canCommandRun &= true;
						else
							canCommandRun = false;
					}
					
					CanCommandRun("cmdImportExternalEnum", ref canCommandRun);
                    command.Enabled = canCommandRun;
                    command.Visible = canCommandRun;
                    return;
                }
            }
        }
        
        // Partial method for dealing with special cases of command enabling. Implement
        // in a separate partial class if required.
        partial void CanCommandRun(string commandName, ref bool canCommandRun);

        /// <summary>
        /// Occurs when one of the custom menu items is clicked.
        /// </summary>
        /// <param name="sender">Sender of this event.</param>
        /// <param name="e">Event arguments.</param>
        internal void OnPopUpMenuClick( object sender, EventArgs e )
        {
            // Get the current menu command
            MenuCommand command = sender as MenuCommand;

            if( command != null )
            {
                if( command.CommandID.Guid.Equals( this.cmdMovePropertyUpGUID ) )
                {
                    this.MovePropertyUp();
                }
                if( command.CommandID.Guid.Equals( this.cmdMovePropertyDownGUID ) )
                {
                    this.MovePropertyDown();
                }
                if( command.CommandID.Guid.Equals( this.cmdImportExternalEnumGUID ) )
                {
                    this.ImportExternalEnum();
                }
            }
        }

        #endregion
    }
}